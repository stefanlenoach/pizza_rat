// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model
model User {
  id          String    @id @default(uuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  email       String    @unique
  username    String    @unique
  password    String
  name        String?
  bio         String?
  avatar      String?
  reviews     Review[]
  ratings     Rating[]
  favorites   Favorite[]
}

// Pizza Place model
model PizzaPlace {
  id          String    @id @default(uuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  name        String
  address     String
  city        String
  state       String?
  zipCode     String?
  country     String    @default("USA")
  phone       String?
  website     String?
  googlePlaceId String?  @unique
  latitude    Float
  longitude   Float
  description String?
  hours       Json?
  photos      String[]  // URLs to photos
  reviews     Review[]
  ratings     Rating[]
  favorites   Favorite[]
  
  // Aggregated rating data
  avgRating   Float?    @default(0)
  numRatings  Int       @default(0)
}

// Review model
model Review {
  id          String      @id @default(uuid())
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  content     String
  photos      String[]    // URLs to photos
  userId      String
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  placeId     String
  place       PizzaPlace  @relation(fields: [placeId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([placeId])
}

// Rating model
model Rating {
  id          String      @id @default(uuid())
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  value       Float       // 1-5 star rating
  userId      String
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  placeId     String
  place       PizzaPlace  @relation(fields: [placeId], references: [id], onDelete: Cascade)
  
  @@unique([userId, placeId])  // One rating per user per place
  @@index([userId])
  @@index([placeId])
}

// Favorite model (for users to save favorite places)
model Favorite {
  id          String      @id @default(uuid())
  createdAt   DateTime    @default(now())
  userId      String
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  placeId     String
  place       PizzaPlace  @relation(fields: [placeId], references: [id], onDelete: Cascade)
  
  @@unique([userId, placeId])  // Can't favorite the same place twice
  @@index([userId])
  @@index([placeId])
}
